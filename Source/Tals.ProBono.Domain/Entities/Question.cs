//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;
using System.ServiceModel;

namespace Tals.ProBono.Domain.Entities
{
    using System;
    using System.Collections.Generic;
    
    public partial class Question
    {
        public Question()
        {
            this.Posts = new HashSet<Post>();
            this.Audits = new HashSet<Audit>();
        }
    
        public int Id { get; set; }
        public string Subject { get; set; }
        public string Body { get; set; }
        public string CreatedBy { get; set; }
        public string TakenBy { get; private set; }
        public Nullable<System.DateTime> TakenDate { get; private set; }
        public System.DateTime CreatedDate { get; set; }
        public Nullable<int> CategoryId { get; set; }
        public int CountyId { get; set; }
        public Nullable<System.DateTime> CourtDate { get; set; }
        public Nullable<System.DateTime> ClosedDate { get; private set; }
        public string ClosedBy { get; private set; }
        public int CaseCountyId { get; set; }
        public string PersonOrOrganization { get; set; }
    
        public virtual ICollection<Post> Posts { get; set; }
        public virtual Category Category { get; set; }
        public virtual County County { get; set; }
        public virtual ICollection<Audit> Audits { get; set; }
        public virtual County CaseCounty { get; set; }

        public string CourtDateAsShortString
        {
            get
            {
                return CourtDate == null
                    ? string.Empty
                    : CourtDate.Value.ToShortDateString();
            }
        }

        public bool IsClosed()
        {
            return !string.IsNullOrEmpty(ClosedBy) && ClosedDate != null;
        }

        public bool IsTaker(string userName)
        {
            return !string.IsNullOrEmpty(TakenBy) && TakenBy.ToLower() == userName.ToLower();
        }

        public bool IsOwner(string userName)
        {
            return !string.IsNullOrEmpty(CreatedBy) && CreatedBy.ToLower() == userName.ToLower();
        }

        public bool IsTaken()
        {
            return !string.IsNullOrEmpty(TakenBy) && TakenDate != null;
        }

        public void Take(string userName)
        {
            if (!string.IsNullOrEmpty(TakenBy))
                throw new ActionNotSupportedException("This item has already been taken");

            this.TakenBy = userName;
            this.TakenDate = DateTime.Now;
        }

        public void Assign(string assignedTo)
        {
            if (TakenBy == assignedTo) return;

            TakenDate = string.IsNullOrEmpty(assignedTo) ? null : (DateTime?) DateTime.Now;
            TakenBy = assignedTo;
        }

        public void Closed(string userName)
        {
            ClosedBy = userName;
            ClosedDate = DateTime.Now;
        }

        public void UnTake()
        {
            if (string.IsNullOrEmpty(this.TakenBy))
                throw new ActionNotSupportedException("This item has not yet been taken");


            this.TakenBy = null;
            this.TakenDate = null;
        }

        public void Open()
        {
            this.ClosedDate = null;
            this.ClosedBy = null;
            foreach (var post in Posts)
                post.UnAccept();

        }
    }
<<<<<<< HEAD


    public class QuestionValidation
    {
        [HiddenInput(DisplayValue = false)]
        public int Id { get; set; }

        [Required(ErrorMessage = "Subject is required!")]
        [StringLength(100, ErrorMessage = "Subject may not be longer than 100 characters")]
        [DisplayName("What is your question about?")]
        public string Subject { get; set; }

        [Required(ErrorMessage = "Question is required")]
        [StringLength(8000, ErrorMessage = "Question may not be longer than 8000 characters")]
        [DisplayName("Type your question here:")]
        public string Body { get; set; }

        [HiddenInput(DisplayValue = false)]
        public string CreatedBy { get; set; }

        [DisplayName("Kind of problem")]
        [Required(ErrorMessage = "Kind of problem is required.")]
        public int CategoryId { get; set; }

        [DisplayName("Enter a court date, if you have one:")]
        public DateTime? CourtDate { get; set; }

        public DateTime LastUpdated { get; set; }

        public DateTime TakenDate { get; set; }

        public string County { get; set; }

        public DateTime CreatedDate { get; set; }
    }

    public enum QuestionStatus
    {
        Current,
        Overdue,
        Urgent
    }
}
=======
}
>>>>>>> 7845f46... Changes to Repository pattern
